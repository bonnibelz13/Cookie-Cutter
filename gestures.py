import cv2
import mediapipe as mp
import numpy as np

class HandGesture:
    def __init__(self):
        self.game_running = True  # ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏Å‡∏° (True = ‡πÄ‡∏Å‡∏°‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô, False = ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÄ‡∏Å‡∏°)
        self.gesture_cooldown = 0  # ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ã‡πâ‡∏≥‡πÄ‡∏£‡πá‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
        self.cooldown_frames = 30  # ‡∏£‡∏≠ 30 ‡πÄ‡∏ü‡∏£‡∏°‡∏Å‡πà‡∏≠‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ó‡πà‡∏≤‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
        
        # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô MediaPipe Hands solution ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏°‡∏∑‡∏≠
        self.mp_hands = mp.solutions.hands
        self.hands = self.mp_hands.Hands(
            static_image_mode=False,
            max_num_hands=1,
            min_detection_confidence=0.7,
            min_tracking_confidence=0.6
        )
        
        # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ó‡πà‡∏≤‡∏°‡∏∑‡∏≠
        self.min_gesture_confidence = 0.85
        
        # ‡πÄ‡∏Å‡πá‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö
        self.detection_history = []
        self.history_length = 5  # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ü‡∏£‡∏°‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à
        
    def process_frame(self, frame):
        """
        ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏ü‡∏£‡∏°‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ó‡πà‡∏≤‡∏°‡∏∑‡∏≠
        
        Args:
            frame (numpy.ndarray): ‡πÄ‡∏ü‡∏£‡∏°‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á
            
        Returns:
            numpy.ndarray: ‡πÄ‡∏ü‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏°‡∏∑‡∏≠
        """
        # ‡∏•‡∏î‡∏Ñ‡πà‡∏≤ cooldown ‡∏•‡∏á‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏ü‡∏£‡∏°
        if self.gesture_cooldown > 0:
            self.gesture_cooldown -= 1
            
        # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô RGB ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö MediaPipe
        rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏°‡∏∑‡∏≠
        results = self.hands.process(rgb_frame)
        
        # ‡∏ß‡∏≤‡∏î‡∏à‡∏∏‡∏î‡πÅ‡∏•‡∏∞‡πÄ‡∏™‡πâ‡∏ô‡∏°‡∏∑‡∏≠
        if results.multi_hand_landmarks:
            for hand_landmarks in results.multi_hand_landmarks:
                # ‡πÅ‡∏õ‡∏•‡∏á landmarks ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á (x, y)
                h, w, c = frame.shape
                hand_positions = []
                
                for landmark in hand_landmarks.landmark:
                    x, y = int(landmark.x * w), int(landmark.y * h)
                    hand_positions.append((x, y))
                
                # ‡∏ß‡∏≤‡∏î‡∏à‡∏∏‡∏î,‡πÄ‡∏™‡πâ‡∏ô
                mp_drawing = mp.solutions.drawing_utils
                mp_drawing.draw_landmarks(
                    frame, 
                    hand_landmarks, 
                    self.mp_hands.HAND_CONNECTIONS,
                    mp_drawing.DrawingSpec(color=(0, 255, 0), thickness=2, circle_radius=4),
                    mp_drawing.DrawingSpec(color=(0, 0, 255), thickness=2)
                )
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ó‡πà‡∏≤‡∏°‡∏∑‡∏≠‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
                is_rock = self.is_rock_hand_sign(hand_positions)
                self.detection_history.append(is_rock)
                
                # ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞ n ‡πÄ‡∏ü‡∏£‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
                if len(self.detection_history) > self.history_length:
                    self.detection_history.pop(0)
                
                # ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏à‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö
                if self.gesture_cooldown == 0 and self.should_trigger_rock():
                    print("Rock Hand Sign Detected! Exiting the program...")
                    self.game_running = False
                    self.gesture_cooldown = self.cooldown_frames
                
                # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ö‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
                confidence = sum(self.detection_history) / max(1, len(self.detection_history))
                cv2.putText(
                    frame,
                    f"Rock confidence: {confidence:.2f}",
                    (10, 30),
                    cv2.FONT_HERSHEY_SIMPLEX,
                    1,
                    (0, 255, 0) if confidence > self.min_gesture_confidence else (0, 0, 255),
                    2
                )
        
        return frame
    
    def should_trigger_rock(self):
        """
        ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏Ñ‡∏ß‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ó‡πà‡∏≤ Rock ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ‡∏à‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö
        
        Returns:
            bool: True ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏ß‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ó‡πà‡∏≤ Rock, False ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£
        """
        if not self.detection_history:
            return False
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏à‡∏≤‡∏Å‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏ß‡∏Å
        confidence = sum(self.detection_history) / len(self.detection_history)
        
        # ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
        return confidence >= self.min_gesture_confidence
        
    def process_gesture(self, hand_positions):
        """
        ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ó‡πà‡∏≤‡∏°‡∏∑‡∏≠ "Rock" ‡∏à‡∏≤‡∏Å‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å HandTracking
        
        Args:
            hand_positions (list): ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡∏à‡∏∏‡∏î‡∏û‡∏¥‡∏Å‡∏±‡∏î (x, y) ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å HandTracking
        """
        # ‡∏•‡∏î‡∏Ñ‡πà‡∏≤ cooldown ‡∏•‡∏á‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏ü‡∏£‡∏°
        if self.gesture_cooldown > 0:
            self.gesture_cooldown -= 1
            return
            
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏°‡∏∑‡∏≠‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if not hand_positions or len(hand_positions) < 21:
            return
            
        # ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏≠‡∏á MediaPipe ‡∏°‡∏µ 21 ‡∏à‡∏∏‡∏î
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏•‡∏á‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
        is_rock = self.is_rock_hand_sign(hand_positions)
        self.detection_history.append(is_rock)
        
        # ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞ N ‡πÄ‡∏ü‡∏£‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        if len(self.detection_history) > self.history_length:
            self.detection_history.pop(0)
            
        # ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏à‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö
        if self.should_trigger_rock():
            print("Rock Hand Sign Detected! Exiting the program...")
            self.game_running = False
            self.gesture_cooldown = self.cooldown_frames

   

    def is_rock_hand_sign(self, hand_positions):
        """
        ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡πà‡∏≤‡∏°‡∏∑‡∏≠ "Rock" (ü§ò) - ‡∏ô‡∏¥‡πâ‡∏ß‡∏ä‡∏µ‡πâ‡πÅ‡∏•‡∏∞‡∏ô‡∏¥‡πâ‡∏ß‡∏Å‡πâ‡∏≠‡∏¢‡πÄ‡∏´‡∏¢‡∏µ‡∏¢‡∏î‡∏ï‡∏£‡∏á, ‡∏ô‡∏¥‡πâ‡∏ß‡∏Å‡∏•‡∏≤‡∏á ‡∏ô‡∏¥‡πâ‡∏ß‡∏ô‡∏≤‡∏á ‡πÅ‡∏•‡∏∞‡∏ô‡∏¥‡πâ‡∏ß‡πÇ‡∏õ‡πâ‡∏á‡∏á‡∏≠
        """
        try:
            if len(hand_positions) >= 21:
                # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
                index_tip, middle_tip, ring_tip, pinky_tip = hand_positions[8], hand_positions[12], hand_positions[16], hand_positions[20]
                index_pip, middle_pip, ring_pip, pinky_pip = hand_positions[6], hand_positions[10], hand_positions[14], hand_positions[18]
                index_mcp, middle_mcp, ring_mcp, pinky_mcp = hand_positions[5], hand_positions[9], hand_positions[13], hand_positions[17]
                thumb_mcp, thumb_tip = hand_positions[2], hand_positions[4]
                wrist = hand_positions[0]  # ‡∏à‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏∑‡∏≠

                def distance(p1, p2):
                    return np.linalg.norm(np.array(p1) - np.array(p2))

                # ‚úÖ ‡πÉ‡∏ä‡πâ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡πâ‡∏á (Y) ‡πÅ‡∏ó‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á
                index_extended = index_tip[1] < index_pip[1]  # ‡∏ô‡∏¥‡πâ‡∏ß‡∏ä‡∏µ‡πâ‡πÄ‡∏´‡∏¢‡∏µ‡∏¢‡∏î
                pinky_extended = pinky_tip[1] < pinky_pip[1]  # ‡∏ô‡∏¥‡πâ‡∏ß‡∏Å‡πâ‡∏≠‡∏¢‡πÄ‡∏´‡∏¢‡∏µ‡∏¢‡∏î

                middle_bent = middle_tip[1] > middle_pip[1]  # ‡∏ô‡∏¥‡πâ‡∏ß‡∏Å‡∏•‡∏≤‡∏á‡∏á‡∏≠
                ring_bent = ring_tip[1] > ring_pip[1]  # ‡∏ô‡∏¥‡πâ‡∏ß‡∏ô‡∏≤‡∏á‡∏á‡∏≠

                # ‚úÖ **‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ô‡∏¥‡πâ‡∏ß‡πÇ‡∏õ‡πâ‡∏á**
                # ‡∏ô‡∏¥‡πâ‡∏ß‡πÇ‡∏õ‡πâ‡∏á‡∏á‡∏≠ ‚Üí thumb_tip ‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤ thumb_mcp ‡πÅ‡∏•‡∏∞ wrist
                thumb_bent = thumb_tip[1] < thumb_mcp[1] and thumb_tip[1] < wrist[1]

                # ‚úÖ **‡πÄ‡∏û‡∏¥‡πà‡∏° Debugging ‡πÉ‡∏´‡πâ‡∏î‡∏π‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ**
                print(f"Index Extended: {index_extended}, Pinky Extended: {pinky_extended}")
                print(f"Middle Bent: {middle_bent}, Ring Bent: {ring_bent}, Thumb Bent: {thumb_bent} (Tip: {thumb_tip[1]:.2f}, MCP: {thumb_mcp[1]:.2f}, Wrist: {wrist[1]:.2f})")
                print(f"Hand Size: {distance(wrist, index_tip):.2f}")

                is_rock = index_extended and pinky_extended and middle_bent and ring_bent and thumb_bent

                if is_rock:
                    print("‚úÖ ROCK HAND SIGN DETECTED! ü§ò")
                    return True

            return False

        except Exception as e:
            print(f"‚ùå Error in gesture detection: {e}")
            return False

